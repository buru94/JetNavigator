package com.example.pimz.jetnavigatorimport android.content.Contextimport android.content.Intentimport android.graphics.Colorimport android.graphics.PorterDuffimport android.os.*import android.provider.Settingsimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.*import com.PointMobile.PMSyncService.BluetoothChatServiceimport com.PointMobile.PMSyncService.SendCommandimport com.example.pimz.jetnavigator.R.layout.support_simple_spinner_dropdown_itemimport com.google.gson.*import com.squareup.picasso.Picassoimport kotlinx.android.synthetic.main.activity_product_list.*import kotlinx.android.synthetic.main.activity_product_list_grid_row.view.*import kr.co.ezapps.ezsmarty.Dataimport kr.co.ezapps.ezsmarty.Serviceimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport retrofit2.Retrofitimport retrofit2.converter.gson.GsonConverterFactoryimport java.io.UnsupportedEncodingExceptionimport java.net.URLEncoderimport kotlin.math.Eclass ProductListActivity : BaseActivity() {    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_product_list)        val mProductId = PRODUCT_LIST_ACTIVITY_EDITTEXT.text.toString()        Product = ArrayList()        doGetListPost(mProductId, 1, GET_LIST)        var value = intent.extras.get("title")        title = "상품목록"        SendCommand.SendCommandInit(mChatService, mHandler)        PRODUCT_LIST_ACTIVITY_SPINNER.onItemSelectedListener        val item: Array<String> = arrayOf("상품명", "상품코드", "바코드", " 공급처 상품명", "원산지", "제조사")        val Listadapter = ArrayAdapter(this, support_simple_spinner_dropdown_item, item)        PRODUCT_LIST_ACTIVITY_SPINNER.adapter = Listadapter        PRODUCT_LIST_SEARCH_BTN.setOnClickListener {            val PrId = PRODUCT_LIST_ACTIVITY_EDITTEXT.text.toString()            doGetListPost(PrId, 1, GET_LIST)        }        PRODUCT_LIST_ACTIVITY_GRIDVIEW.setOnItemClickListener { adapterView, view, position, id ->            map["position"] = position.toString()            map["mProductId"] = Product[position].getProduct_id().toString()            map["mImageUrl"] = Product[position].getImageurl().toString()            map["mEnable_sale"] = Product[position].getEnable_sale().toString()            Log.d("확인확인",Product[position].getProduct_id().toString())            progressON(this, null)            val intent = Intent(applicationContext, DetailProductActivity::class.java)            intent.putExtra("mEnable_sale", map["mEnable_sale"].toString())            intent.putExtra("mImageUrl", map["mImageUrl"].toString())            intent.putExtra("mProductId", map["mProductId"].toString())            startActivity(intent)            progressOFF()        }    }    class ImageAdapter : BaseAdapter {        private var inflater: LayoutInflater? = null        var context: Context? = null        private var imageList: ArrayList<Products>? = null        constructor(context: Context, imageList: ArrayList<Products>) : super() {            this.context = context            this.imageList = imageList        }        override fun getCount(): Int {            return imageList!!.size        }        override fun getItem(position: Int): Any? {            return imageList!![position]        }        override fun getItemId(position: Int): Long {            return position.toLong()        }        override fun getView(position: Int, convertView: View?, parent: ViewGroup?): View? {            var convert = convertView            var holder = ViewHolder()            if (convert == null) {                inflater = context!!.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater                convert = inflater!!.inflate(R.layout.activity_product_list_grid_row, null)            }            val picassoImageView = convert!!.PRODUCT_LIST_ACTIVITY_GRID_IMAGEVIEW as ImageView            holder.mImage = picassoImageView            convert.tag = holder            var mUrl = imageList!![position].getImageurl().toString()            Picasso   // 피카소                .get()                .load(mUrl)                .fit()                .centerCrop()                .error(R.drawable.ezadmin_title_logo)                .into(holder.mImage)            convert.PRODUCT_LIST_ACTIVITY_SOLDOUT_TEXTVIEW.visibility = View.GONE            holder!!.mImage!!.setColorFilter(Color.parseColor("#FFFFFF"), PorterDuff.Mode.MULTIPLY)            if (imageList!![position].getEnable_sale() == "0") {                convert.PRODUCT_LIST_ACTIVITY_SOLDOUT_TEXTVIEW.visibility = View.VISIBLE                holder!!.mImage!!.setColorFilter(Color.parseColor("#6E6E6E"), PorterDuff.Mode.MULTIPLY)            }            convert.PRODUCT_LIST_ACTIVITY_GRID_PRID?.text = imageList!![position].getProduct_id().toString()            convert.PRODUCT_LIST_ACTIVITY_GRID_PRNAME?.text = imageList!![position].getName().toString()            return convert        }        inner class ViewHolder {            var mImage: ImageView? = null            var text: TextView? = null        }    }    private fun doGetListPost(mProductId: String, page: Int, mode: Int): Boolean {        try {            val mUUID = Settings.Secure.getString(applicationContext.contentResolver, Settings.Secure.ANDROID_ID)            val mUrlAuthcode = URLEncoder.encode(Session.getInstance().authCode, "UTF-8")            val mUrlType = URLEncoder.encode("NAME", "UTF-8")            val mUrlUserName = URLEncoder.encode(Session.getInstance().userName, "UTF-8")            val mUrlProductId = URLEncoder.encode(mProductId, "UTF-8")            val mLimit = 50            val mURL = "api/function.php"            val map = HashMap<String, String>()            var mPage = 1            if (mode == ADD) {                mPage = page            } else {                mPage = 1            }            val mToken =                "SEARCHTYPE=$mUrlType|STRING=$mUrlProductId|WORKER=$mUrlUserName|PAGE=$mPage|LIMIT=$mLimit|UUID=$mUUID"            map["ACTION"] = URLFactory.GetProductList            map["AUTHCODE"] = mUrlAuthcode            map["VERSION"] = "v1"            map["TOKEN"] = mToken            if (mode == GET_LIST) {                doGetProductList(mProductId, map, mURL)            } else if (mode == ADD) {                doAdd(map, mURL)            }        } catch (e: UnsupportedEncodingException) {            e.printStackTrace()        }        return true    }    fun doGetProductList(mProductId: String, input: HashMap<String, String>, Url: String) {        //progressON(this, null)        progressON(this, "Loading...")        val retrofitService = retrofit.create(Service::class.java)        val call = retrofitService.postData(input, Url)        call.enqueue(object : Callback<Data> {            override fun onResponse(call: Call<Data>, response: Response<Data>) {                // 성공                val mProduct: JsonArray = response.body()!!.products!!                when {                    mProduct == null -> {                        doPlayAudio("error_search_error")                        progressOFF()                    }                    mProduct!!.size() != 0 -> {                        Product = ArrayList()                        for (i in 0 until mProduct.size()) {                            var mJson = (mProduct.get(i)).asJsonObject                            var Enable_sale = mJson.get("enable_sale").toString().replace("\"", "")                            var Imageurl = mJson.get("img_500").toString().replace("\"", "")                            var Name = mJson.get("name").toString().replace("\"", "")                            var Product_id = mJson.get("product_id").toString().replace("\"", "")                            var Barcode = mJson.get("barcode").toString().replace("\"", "")                            Product.add(Products())                            Product[i].setBarcode(Barcode)                            Product[i].setEnable_sale(Enable_sale)                            Product[i].setImageurl(Imageurl)                            Product[i].setName(Name)                            Product[i].setProduct_id(Product_id)                            Log.d("Product_for", Product[i].getName().toString())                        }                        Log.d("Product", Product[0].getName().toString())                        adapter = ImageAdapter(applicationContext, imageList = Product)                        PRODUCT_LIST_ACTIVITY_GRIDVIEW.adapter = adapter                        Session.getInstance().page = 1                        var i = Session.getInstance().page                        progressOFF()                        doAddPage(mProductId, i, mAddFlag)                    }                    else -> {                        progressOFF()                        doPlayAudio("error_search_error")                    }                }            }            override fun onFailure(call: Call<Data>, t: Throwable) {                // 실패                Log.getStackTraceString(t)                progressOFF()            }        })    }    private fun doAdd(input: HashMap<String, String>, Url: String) {        progressON(this, "Loading...")        mAddFlag = true        val retrofitService = retrofit.create(Service::class.java)        val call = retrofitService.postData(input, Url)        call.enqueue(object : Callback<Data> {            override fun onResponse(call: Call<Data>, response: Response<Data>) {                // 성공                val mProduct: JsonArray = response.body()!!.products!!                when {                    mProduct == null -> {                        progressOFF()                        doPlayAudio("error_search_error")                    }                    mProduct.size() > 0 -> {                        var size = Product.size                        for (i in 0 until mProduct.size()) {                            var mJson = (mProduct.get(i)).asJsonObject                            var mUrl = mJson.get("img_500").toString().replace("\"", "")                            var mPr_name = mJson.get("name").toString().replace("\"", "")                            var mPr_id = mJson.get("product_id").toString().replace("\"", "")                            var mEnable_sale = mJson.get("enable_sale").toString().replace("\"", "")                            Product.add(Products())                            Product[size + i].setEnable_sale(mEnable_sale)                            Product[size + i].setImageurl(mUrl)                            Product[size + i].setName(mPr_name)                            Product[size + i].setProduct_id(mPr_id)                        }                        progressOFF()                        adapter!!.notifyDataSetChanged()                        mAddFlag = false                    }                    else -> {                        progressOFF()                    }                }            }            override fun onFailure(call: Call<Data>, t: Throwable) {                // 실패                Log.getStackTraceString(t)            }        })    }    private fun doAddPage(mProductId: String, i: Int, mFlag: Boolean): Int {        var i = i        PRODUCT_LIST_ACTIVITY_GRIDVIEW.setOnScrollListener(object : AbsListView.OnScrollListener {            override fun onScroll(                view: AbsListView?,                firstVisibleItem: Int,                visibleItemCount: Int,                totalItemCount: Int            ) {                if ((totalItemCount - visibleItemCount) <= firstVisibleItem && !mAddFlag) {                    mAddFlag = true                    doGetListPost(mProductId, i, ADD)                    Session.getInstance().page = i++                }            }            override fun onScrollStateChanged(view: AbsListView?, state: Int) {}        })        return i++    }    override fun onResume() {        // TODO Auto-generated method stub        super.onResume()        if (D) Log.e(TAG, "+++ ON RESUME +++")        SendCommand.SendCommandInit(mChatService, mHandler)        // Performing this check in onResume() covers the case in which BT was        // not enabled during onStart(), so we were paused to enable it...        // onResume() will be called when ACTION_REQUEST_ENABLE activity returns.        if (mChatService != null) {            // Only if the state is STATE_NONE, do we know that we haven't started already            if (mChatService.state == BluetoothChatService.STATE_NONE) {                // Start the Bluetooth chat services                mChatService.start()            }        }        if (D) Log.e(TAG, "--- ON RESUME ---")    }    val mHandler: Handler = object : Handler() {        override fun handleMessage(msg: Message) {            when (msg.what) {                MESSAGE_BARCODE -> {                    Log.d("asda", "asdasdasdasd")                    val BarcodeBuff = msg.obj as ByteArray                    var Barcode = ""                    Barcode = String(BarcodeBuff, 0, msg.arg1)                    if (Barcode.length != 0) {                        PRODUCT_LIST_ACTIVITY_EDITTEXT.setText(Barcode)                    }                }            }        }    }    companion object {        private const val GET_LIST = 0        private const val ADD = 1        private const val GET_INFO = 2        private val D = true        var map = HashMap<String, String>()        var mAddFlag: Boolean = false        var adapter: ProductListActivity.ImageAdapter? = null        var Product: ArrayList<Products> = ArrayList()    }}